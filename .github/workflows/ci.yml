name: Build and test

on:
  push:
    branches:
      - master
      - devel

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  # parametric-build:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: jharwell/ubuntu20.04:2023-11-14
  #   strategy:
  #     matrix:
  #       build_type:
  #         - OPT
  #         - DEV

  #         # No need to test with {ERROR,WARN,INFO}--those aren't different than
  #         # ALL for the purposes of testing compilation.
  #       er_lvl:
  #         - NONE
  #         - FATAL
  #         - ALL

  #       ptr_align:
  #         - 1
  #         - 2
  #         - 4

  #       zalloc:
  #         - YES
  #         - NO

  #       er_plugin:
  #         - LOG4CL
  #         - SIMPLE
  #         - ZLOG


  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Build=${{ matrix.build_type }}
  #       shell: bash
  #       run: |

  #         git config --global --add safe.directory $PWD
  #         git submodule update --init --remote --recursive
  #         mkdir -p build && cd build

  #         find /usr/local/ -name "*zlog*"

  #         cmake  \
  #         -DCMAKE_INSTALL_PREFIX=/usr/local \
  #         -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
  #         -DLIBRA_DEPS_PREFIX=/usr/local \
  #         -DLIBRA_TESTS=yes \
  #         -DLIBRA_CODE_COV=YES \
  #         -DLIBRA_MT=YES \
  #         -DRCSW_CONFIG_STDIO_PUTCHAR=putchar \
  #         -DLIBRA_ERL=ALL \
  #         -DLIBRA_VALGRIND_COMPAT=YES \
  #         -DRCSW_CONFIG_PTR_ALIGN=${{ matrix.ptr_align }} \
  #         -DRCSW_CONFIG_ZALLOC=${{ matrix.zalloc }} \
  #         -DRCSW_CONFIG_ER_PLUGIN=${{ matrix.er_plugin }} \
  #         -DRCSW_CONFIG_LIBTYPE=SHARED \
  #         ..


  #         make -j$(nproc)

  #         cmake  \
  #         -DCMAKE_INSTALL_PREFIX=/usr/local \
  #         -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
  #         -DLIBRA_DEPS_PREFIX=/usr/local \
  #         -DLIBRA_TESTS=yes \
  #         -DLIBRA_CODE_COV=YES \
  #         -DLIBRA_MT=YES \
  #         -DRCSW_CONFIG_STDIO_PUTCHAR=th_putchar \
  #         -DLIBRA_ERL=ALL \
  #         -DLIBRA_VALGRIND_COMPAT=YES \
  #         -DRCSW_CONFIG_PTR_ALIGN=${{ matrix.ptr_align }} \
  #         -DRCSW_CONFIG_ZALLOC=${{ matrix.zalloc }} \
  #         -DRCSW_CONFIG_ER_PLUGIN=${{ matrix.er_plugin }} \
  #         -DRCSW_CONFIG_LIBTYPE=STATIC \
  #         ..

  #         # Normal tests
  #         make -j$(nproc)

  build-and-test:
    runs-on: ubuntu-latest
    # needs:
    #   - parametric-build
    container:
      image: jharwell/ubuntu20.04:2023-11-14
    strategy:
      matrix:
        build_type:
          - OPT
          - DEV

        ptr_align:
          - 1
          - 2
          - 4
        zalloc:
          - YES
          - NO


    steps:
      - uses: actions/checkout@v3

      - name: Memcheck
        shell: bash
        run: |

          git config --global --add safe.directory $PWD
          git submodule update --init --remote --recursive
          mkdir -p build && cd build
          sudo apt-get install valgrind

          cmake  \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DLIBRA_DEPS_PREFIX=/usr/local \
          -DLIBRA_TESTS=yes \
          -DLIBRA_CODE_COV=YES \
          -DLIBRA_MT=YES \
          -DRCSW_CONFIG_STDIO_PUTCHAR=th_putchar \
          -DLIBRA_ERL=NONE \
          -DLIBRA_VALGRIND_COMPAT=YES \
          -DRCSW_CONFIG_PTR_ALIGN=${{ matrix.ptr_align }} \
          -DRCSW_CONFIG_ZALLOC=${{ matrix.zalloc }} \
          -DRCSW_CONFIG_LIBTYPE=STATIC \
          ..

          make all-tests -j$(nproc)

          # Run under valgrind (only with no ER because that slows things down a
          # lot)
          ctest -T memcheck --verbose --output-on-failure

      - name: Generate coverage
        shell: bash
        run: |

          git config --global --add safe.directory $PWD
          git submodule update --init --remote --recursive
          mkdir -p build && cd build

          cmake  \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DLIBRA_DEPS_PREFIX=/usr/local \
          -DLIBRA_TESTS=yes \
          -DLIBRA_CODE_COV=YES \
          -DLIBRA_MT=YES \
          -DRCSW_CONFIG_STDIO_PUTCHAR=th_putchar \
          -DLIBRA_ERL=ALL \
          -DLIBRA_VALGRIND_COMPAT=YES \
          -DRCSW_CONFIG_PTR_ALIGN=${{ matrix.ptr_align }} \
          -DRCSW_CONFIG_ZALLOC=${{ matrix.zalloc }} \
          -DRCSW_CONFIG_LIBTYPE=STATIC \
          ..

          # Normal tests
          make build-and-test -j$(nproc)

          make coverage-report

      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: build/coverage/coverage.info

  docs:
    uses: ./.github/workflows/pages.yml
    needs:
      - build-and-test
    secrets: inherit

  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-and-test
    container:
      image: jharwell/ubuntu22.04:2023-04-12
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Build for release
        shell: bash
        run: |
          git config --global --add safe.directory $PWD
          git config --global user.email "${{ github.event.pusher.email }}"
          git config --global user.name "${{ github.event.pusher.name }}"

          git submodule update --init --remote --recursive
          git changelog --start-tag 1.2.0 -n -x > changelog

          mkdir -p build && cd build

          cmake  \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DCMAKE_BUILD_TYPE=DEV \
          -DLIBRA_DEPS_PREFIX=/usr \
          -DCPACK_PACKAGE_NAME=rcsw-dev \
          ..

          make package -j$(nproc)

          cmake  \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DCMAKE_BUILD_TYPE=OPT \
          -DLIBRA_DEPS_PREFIX=/usr \
          -DCPACK_PACKAGE_NAME=rcsw-opt \
          ..

          make package -j$(nproc)

          lintian *.deb

      - name: Tag release
        shell: bash
        run: |
          VERSION_MAJOR=$(sed -nE 's/.*PROJECT_VERSION_MAJOR ([0-9]+).*/\1/p' cmake/project-local.cmake)
          VERSION_MINOR=$(sed -nE 's/.*PROJECT_VERSION_MINOR ([0-9]+).*/\1/p' cmake/project-local.cmake)
          VERSION_PATCH=$(sed -nE 's/.*PROJECT_VERSION_PATCH ([0-9]+).*/\1/p' cmake/project-local.cmake)
          PACKAGE_VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH


          if [ "${{ github.ref }}" = "refs/heads/devel" ]; then
            RELEASE_VERSION=${PACKAGE_VERSION}.beta
            RELEASE_MESSAGE="Development release ${RELEASE_VERSION}"

            git tag ${RELEASE_VERSION} -m "${RELEASE_MESSAGE}" -f
            git push -o ci.skip origin ${RELEASE_VERSION} -f
          else
            RELEASE_VERSION=${PACKAGE_VERSION}.beta
            RELEASE_MESSAGE="Release ${RELEASE_VERSION}"

            git tag ${RELEASE_VERSION} -m "${RELEASE_MESSAGE}"
            git push -o ci.skip origin ${RELEASE_VERSION}
          fi

          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "RELEASE_MESSAppGE=${RELEASE_MESSAGE}" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV

      - name: Github beta release
        if: github.ref == 'refs/heads/devel'
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ env.RELEASE_VERSION }}
          prerelease: true
          title: "${{ env.RELEASE_MESSAGE }}"
          files: |
              build/*.deb

      - name: Github release
        if: github.ref == 'refs/heads/master'
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ env.RELEASE_VERSION }}
          prerelease: false
          title: "${{ env.RELEASE_MESSAGE }}"
          files: |
              build/*.deb

      - name: Clone PPA
        if: github.ref == 'refs/heads/master'
        uses: actions/checkout@v2
        with:
          repository: jharwell/ppa
          path: ppa
          token: ${{ secrets.RCSW_DEPLOY_TOKEN }}

      - name: Deploy to PPA
        if: github.ref == 'refs/heads/master'
        shell: bash
        run: |
          cd ppa
          cp ../build/*.deb .
          ls -al ..
          echo  "${{ secrets.RCSW_GPG_SECRET_KEY }}" | base64 --decode | gpg --import
          ./scripts/update-packages.sh
          git add -A
          git commit -m "Deploy RCSW ${{ env.PACKAGE_VERSION}}"
          git remote set-url origin https://jharwell:${{ secrets.RCSW_DEPLOY_TOKEN }}@github.com/jharwell/ppa.git
          git push -u origin master
